name: Build Flet APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite ejecutar manualmente

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        build-tools: 33.0.2
        ndk-version: 25.2.9519653
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flet
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Verify Flet installation
      run: |
        python -c "import flet; print(f'Flet version: {flet.__version__}')"
        flet --version
        
    - name: Set Android environment variables
      run: |
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "$ANDROID_SDK_ROOT/tools/bin" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        
    - name: Accept Android licenses
      run: |
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
    - name: Verify Android setup
      run: |
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        ls -la $ANDROID_SDK_ROOT/
        
    - name: Create build directory
      run: mkdir -p build
      
    - name: Build APK
      run: |
        echo "Starting APK build..."
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        # Construir la APK con configuraciÃ³n detallada
        flet build apk \
          --verbose \
          --project "MQTTFlet" \
          --description "MQTT Flet Application" \
          --org "com.example.mqttflet" \
          --template-dir "./build" || {
            echo "Build failed with exit code $?"
            echo "Checking for error logs..."
            find . -name "*.log" -exec cat {} \;
            exit 1
          }
          
        echo "Build completed successfully"
        
    - name: Find generated APK
      run: |
        echo "Searching for APK files..."
        find . -name "*.apk" -type f -exec ls -la {} \;
        echo "Contents of build directory:"
        find build/ -type f -exec ls -la {} \; 2>/dev/null || echo "No build directory found"
        echo "Contents of dist directory:"
        find dist/ -type f -exec ls -la {} \; 2>/dev/null || echo "No dist directory found"
        
    - name: List all directories
      if: always()
      run: |
        echo "=== Directory structure ==="
        find . -type d -name "*apk*" -o -name "*build*" -o -name "*dist*" -o -name "*android*" | head -20
        echo "=== All APK files ==="
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        
    - name: Upload APK as artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: MQTTFlet-APK
        path: |
          **/*.apk
          build/**/*.apk
          dist/**/*.apk
        retention-days: 30
        
    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-failure
        path: |
          **/*.log
          build/
          .flet/
        retention-days: 7
        
    - name: Debug information on failure
      if: failure()
      run: |
        echo "=== Python packages ==="
        pip list
        echo "=== Environment variables ==="
        env | grep -E "(ANDROID|JAVA|PATH)" | sort
        echo "=== Java version ==="
        java -version
        echo "=== Android SDK components ==="
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list_installed 2>/dev/null || echo "Failed to list SDK components"
        echo "=== Disk usage ==="
        df -h
        echo "=== Memory usage ==="
        free -h

name: Build Multi-Platform (Flet)

on:
  workflow_dispatch:
    inputs:
      build_apk:
        description: 'Build Android APK'
        required: true
        default: 'true'
        type: boolean
      build_exe:
        description: 'Build Windows EXE'
        required: true
        default: 'true'
        type: boolean
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

# üîß CONFIGURACI√ìN PERSONALIZABLE - MODIFICA AQU√ç
env:
  # üì± INFORMACI√ìN DE LA APP - CAMBIA ESTOS VALORES
  APP_NAME: "MiAppFlet"                    # ‚Üê CAMBIA EL NOMBRE DE LA APP AQU√ç
  APP_DISPLAY_NAME: "Mi Aplicaci√≥n Flet"   # ‚Üê NOMBRE MOSTRADO AL USUARIO
  APP_DESCRIPTION: "Mi aplicaci√≥n creada con Flet"  # ‚Üê DESCRIPCI√ìN DE LA APP
  PACKAGE_NAME: "com.miempresa.miapp"      # ‚Üê CAMBIA EL PACKAGE NAME (Android)
  
  # üìã VERSIONES
  BUILD_NUMBER: 1
  BUILD_VERSION: "1.0.0"
  
  # üõ†Ô∏è VERSIONES DE HERRAMIENTAS
  PYTHON_VERSION: "3.12.2"
  FLUTTER_VERSION: "3.22.2"
  
  # üéØ CONTROL DE BUILDS - DESCOMENTA/COMENTA PARA ACTIVAR/DESACTIVAR
  # Si quieres solo APK, comenta la l√≠nea BUILD_EXE
  # Si quieres solo EXE, comenta la l√≠nea BUILD_APK
  BUILD_APK: true     # ‚Üê DESCOMENTA/COMENTA PARA ACTIVAR/DESACTIVAR APK
 # BUILD_EXE: true     # ‚Üê DESCOMENTA/COMENTA PARA ACTIVAR/DESACTIVAR EXE

jobs:
  # ü§ñ JOB PARA CONSTRUIR APK ANDROID
  build-apk:
    runs-on: ubuntu-latest
    # Solo ejecutar si BUILD_APK est√° activado O si se seleccion√≥ en workflow_dispatch
    if: ${{ env.BUILD_APK == 'true' || github.event.inputs.build_apk == 'true' }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: ‚òï Set up Java (JDK 21)
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: üî∑ Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          
      - name: üö´ Disable Flutter analytics
        run: flutter config --no-analytics
        
      # üì± CONFIGURACI√ìN DE ICONOS - DESCOMENTA SI TIENES ICONOS PERSONALIZADOS
      # - name: üé® Setup App Icons
      #   run: |
      #     # Copia tus iconos a las carpetas correctas
      #     # mkdir -p build/assets/icons
      #     # cp assets/icon.png build/assets/icons/icon.png
      #     # Para Android necesitas diferentes tama√±os:
      #     # - 48x48 (mdpi)
      #     # - 72x72 (hdpi)  
      #     # - 96x96 (xhdpi)
      #     # - 144x144 (xxhdpi)
      #     # - 192x192 (xxxhdpi)
        
      - name: üîß Build APK with Flet
        run: |
          flet build apk \
            --verbose \
            --build-number=${{ env.BUILD_NUMBER }} \
            --build-version=${{ env.BUILD_VERSION }} \
            --flutter-build-args="--release --target-platform=android-arm64" \
            --no-rich-output \
            --project="${{ env.APP_NAME }}" \
            --description="${{ env.APP_DESCRIPTION }}" \
            --org="${{ env.PACKAGE_NAME }}"
        env:
          FLUTTER_BUILD_MODE: release
          
      - name: üìÇ List build artifacts
        run: |
          echo "=== Buscando archivos APK ==="
          find . -name "*.apk" -type f
          echo "=== Contenido del directorio build ==="
          ls -la build/ || echo "No hay directorio build"
          
      - name: üì§ Upload APK artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ env.APP_NAME }}-android-${{ env.BUILD_VERSION }}
          path: |
            build/apk/**/*.apk
            build/**/*app-release.apk
            build/**/*.apk
          retention-days: 30

  # üñ•Ô∏è JOB PARA CONSTRUIR EXE WINDOWS  
  build-exe:
    runs-on: windows-latest
    # Solo ejecutar si BUILD_EXE est√° activado O si se seleccion√≥ en workflow_dispatch
    if: ${{ env.BUILD_EXE == 'true' || github.event.inputs.build_exe == 'true' }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      # üé® CONFIGURACI√ìN DE ICONOS PARA WINDOWS - DESCOMENTA SI TIENES ICONO .ICO
      # - name: üé® Setup Windows Icon
      #   run: |
      #     # Coloca tu archivo icon.ico en la carpeta assets/
      #     # mkdir assets
      #     # copy icon.ico assets/icon.ico
      
      - name: üîß Build EXE with Flet
        run: |
          flet build windows \
            --verbose \
            --build-number=${{ env.BUILD_NUMBER }} \
            --build-version=${{ env.BUILD_VERSION }} \
            --no-rich-output \
            --project="${{ env.APP_NAME }}" \
            --description="${{ env.APP_DESCRIPTION }}" \
            --product="${{ env.APP_DISPLAY_NAME }}" \
            --copyright="Copyright (c) 2024 Mi Empresa"
            # --icon="assets/icon.ico"  # ‚Üê DESCOMENTA SI TIENES ICONO
        shell: cmd
        
      - name: üìÇ List build artifacts
        run: |
          echo "=== Buscando archivos EXE ==="
          Get-ChildItem -Recurse -Filter "*.exe" | Select-Object FullName
          echo "=== Contenido del directorio build ==="
          if (Test-Path "build") { Get-ChildItem -Recurse build } else { echo "No hay directorio build" }
        shell: powershell
        
      - name: üì§ Upload EXE artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ env.APP_NAME }}-windows-${{ env.BUILD_VERSION }}
          path: |
            build/windows/**/*.exe
            build/**/*.exe
            dist/**/*.exe
          retention-days: 30

  # üìã JOB PARA CREAR RELEASE (OPCIONAL)
  create-release:
    runs-on: ubuntu-latest
    needs: [build-apk, build-exe]
    # Solo si ambos jobs fueron exitosos (o los que estuvieran habilitados)
    if: ${{ always() && (needs.build-apk.result == 'success' || needs.build-apk.result == 'skipped') && (needs.build-exe.result == 'success' || needs.build-exe.result == 'skipped') }}
    steps:
      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: üìã List downloaded artifacts
        run: |
          echo "=== Artifacts descargados ==="
          ls -la
          find . -name "*.apk" -o -name "*.exe"
        
      # üè∑Ô∏è CREAR RELEASE AUTOM√ÅTICO - DESCOMENTA SI QUIERES RELEASES AUTOM√ÅTICOS
      # - name: üè∑Ô∏è Create Release
      #   uses: softprops/action-gh-release@v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files: |
      #       **/*.apk
      #       **/*.exe
      #     name: ${{ env.APP_DISPLAY_NAME }} v${{ env.BUILD_VERSION }}
      #     body: |
      #       ## üöÄ Nueva versi√≥n de ${{ env.APP_DISPLAY_NAME }}
      #       
      #       ### üì± Archivos incluidos:
      #       - Android APK
      #       - Windows EXE
      #       
      #       ### üîÑ Cambios:
      #       - Versi√≥n ${{ env.BUILD_VERSION }}
      #       - Build n√∫mero ${{ env.BUILD_NUMBER }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# üìã INSTRUCCIONES DE CONFIGURACI√ìN:
#
# üéØ PARA CAMBIAR EL NOMBRE DE LA APP:
# 1. Modifica APP_NAME (nombre t√©cnico, sin espacios)
# 2. Modifica APP_DISPLAY_NAME (nombre mostrado al usuario)
# 3. Modifica PACKAGE_NAME (Android, formato: com.empresa.app)
#
# üé® PARA AGREGAR ICONOS:
# 1. Crea carpeta "assets/" en la ra√≠z del proyecto
# 2. Android: Agrega "icon.png" (512x512px recomendado)
# 3. Windows: Agrega "icon.ico" 
# 4. Descomenta las secciones de iconos en el workflow
#
# ‚öôÔ∏è PARA CONTROLAR QU√â SE CONSTRUYE:
# 
# OPCI√ìN 1 - Usando variables de entorno (autom√°tico):
# - Comenta/descomenta BUILD_APK: true/false
# - Comenta/descomenta BUILD_EXE: true/false
#
# OPCI√ìN 2 - Manual al ejecutar workflow:
# - Ve a Actions ‚Üí Run workflow ‚Üí selecciona qu√© construir
#
# OPCI√ìN 3 - Comentar jobs completos:
# - Comenta todo el job "build-apk:" para desactivar Android
# - Comenta todo el job "build-exe:" para desactivar Windows
#
# üè∑Ô∏è PARA RELEASES AUTOM√ÅTICOS:
# - Descomenta la secci√≥n "Create Release"
# - Crea un tag: git tag v1.0.0 && git push --tags
#
# üìÅ ESTRUCTURA DE ARCHIVOS NECESARIA:
# proyecto/
# ‚îú‚îÄ‚îÄ main.py              (tu app principal)
# ‚îú‚îÄ‚îÄ requirements.txt     (dependencias Python)
# ‚îú‚îÄ‚îÄ .github/workflows/   (este archivo)
# ‚îî‚îÄ‚îÄ assets/             (opcional, para iconos)
#     ‚îú‚îÄ‚îÄ icon.png        (Android - 512x512px)
#     ‚îî‚îÄ‚îÄ icon.ico        (Windows)

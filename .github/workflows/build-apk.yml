name: Build APK (Flet)

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

# 🔧 CONFIGURACIÓN DE LA APP - MODIFICA AQUÍ
env:
  # 📱 INFORMACIÓN DE LA APP - CAMBIA ESTOS VALORES
  APP_NAME: "MiAppFlet"                    # ← CAMBIA EL NOMBRE DE LA APP AQUÍ (sin espacios)
  APP_DISPLAY_NAME: "Mi Aplicación Flet"   # ← NOMBRE MOSTRADO AL USUARIO
  APP_DESCRIPTION: "Mi aplicación creada con Flet"  # ← DESCRIPCIÓN DE LA APP
  PACKAGE_NAME: "com.miempresa.miapp"      # ← CAMBIA EL PACKAGE NAME (formato: com.empresa.app)
  
  # 📋 VERSIONES
  BUILD_NUMBER: 1
  BUILD_VERSION: "1.0.0"
  
  # 🛠️ VERSIONES DE HERRAMIENTAS
  PYTHON_VERSION: "3.12.2"
  FLUTTER_VERSION: "3.22.2"

jobs:
  build-apk:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: ☕ Set up Java (JDK 21)
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: 🔷 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          
      - name: 🚫 Disable Flutter analytics
        run: flutter config --no-analytics
        
      # 🎨 CONFIGURACIÓN DE ICONOS - DESCOMENTA ESTA SECCIÓN SI TIENES ICONO PERSONALIZADO
      # - name: 🎨 Setup App Icon
      #   run: |
      #     echo "Configurando icono personalizado..."
      #     # Verifica si existe el icono
      #     if [ -f "assets/icon.png" ]; then
      #       echo "✅ Icono encontrado: assets/icon.png"
      #       mkdir -p build/assets
      #       cp assets/icon.png build/assets/icon.png
      #     else
      #       echo "⚠️ No se encontró assets/icon.png - usando icono por defecto"
      #     fi
        
      - name: 🔧 Build APK with Flet
        run: |
          echo "🚀 Construyendo APK para: ${{ env.APP_DISPLAY_NAME }}"
          flet build apk \
            --verbose \
            --build-number=${{ env.BUILD_NUMBER }} \
            --build-version=${{ env.BUILD_VERSION }} \
            --flutter-build-args="--release --target-platform=android-arm64" \
            --no-rich-output \
            --project="${{ env.APP_NAME }}" \
            --description="${{ env.APP_DESCRIPTION }}" \
            --org="${{ env.PACKAGE_NAME }}"
            # --icon="assets/icon.png"  # ← DESCOMENTA SI TIENES ICONO PERSONALIZADO
        env:
          FLUTTER_BUILD_MODE: release
          
      - name: 📂 List build artifacts
        run: |
          echo "=== 🔍 Buscando archivos APK generados ==="
          find . -name "*.apk" -type f -exec ls -lh {} \;
          echo ""
          echo "=== 📁 Contenido del directorio build ==="
          if [ -d "build" ]; then
            find build -type f -name "*.apk" -exec ls -lh {} \;
          else
            echo "❌ No se encontró directorio build"
          fi
          
      - name: 📤 Upload APK artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ env.APP_NAME }}-v${{ env.BUILD_VERSION }}-build${{ env.BUILD_NUMBER }}
          path: |
            build/apk/**/*.apk
            build/**/*app-release.apk
            build/**/*.apk
          retention-days: 30
          
      - name: ✅ Build Summary
        run: |
          echo "🎉 ¡Build completado exitosamente!"
          echo ""
          echo "📱 App: ${{ env.APP_DISPLAY_NAME }}"
          echo "📦 Package: ${{ env.PACKAGE_NAME }}"
          echo "🏷️ Versión: ${{ env.BUILD_VERSION }} (Build ${{ env.BUILD_NUMBER }})"
          echo ""
          echo "📥 Para descargar el APK:"
          echo "1. Ve a la pestaña 'Actions' de tu repositorio"
          echo "2. Busca este workflow ejecutado"
          echo "3. Descarga el artifact: ${{ env.APP_NAME }}-v${{ env.BUILD_VERSION }}-build${{ env.BUILD_NUMBER }}"

# 📋 INSTRUCCIONES DE CONFIGURACIÓN:
#
# 🎯 PARA CAMBIAR EL NOMBRE DE LA APP:
# 1. Modifica APP_NAME (nombre técnico, sin espacios ni caracteres especiales)
# 2. Modifica APP_DISPLAY_NAME (nombre que verá el usuario en su dispositivo)
# 3. Modifica APP_DESCRIPTION (descripción de la app)
# 4. Modifica PACKAGE_NAME (identificador único, formato: com.empresa.nombreapp)
#
# 🎨 PARA AGREGAR UN ICONO PERSONALIZADO:
# 1. Crea una carpeta "assets/" en la raíz de tu proyecto
# 2. Coloca tu icono como "assets/icon.png" (tamaño recomendado: 512x512 píxeles)
# 3. DESCOMENTA la sección "Setup App Icon" (líneas 46-55)
# 4. DESCOMENTA la línea --icon="assets/icon.png" (línea 71)
#
# 📁 ESTRUCTURA DE ARCHIVOS NECESARIA:
# tu-proyecto/
# ├── main.py                    # Tu aplicación principal
# ├── requirements.txt           # Dependencias Python  
# ├── .github/workflows/         # Este archivo
# │   └── build.yml
# └── assets/                   # (OPCIONAL - solo si quieres icono personalizado)
#     └── icon.png              # Icono de la app (512x512px recomendado)
#
# 📋 REQUIREMENTS.TXT MÍNIMO:
# flet>=0.21.0
# 
# 🚀 CÓMO USAR:
# 1. Modifica las variables de configuración arriba (APP_NAME, etc.)
# 2. Haz commit y push a tu repositorio
# 3. El APK se construirá automáticamente
# 4. Descárgalo desde Actions → Artifacts
#
# 💡 TIPS:
# - APP_NAME: Solo letras, números y guiones (ej: "MiApp", "mi-app-genial")
# - PACKAGE_NAME: Debe ser único (ej: "com.tuempresa.tuapp")
# - El icono debe ser PNG, preferiblemente 512x512 píxeles
# - Si no tienes icono, Flet usará uno por defecto
